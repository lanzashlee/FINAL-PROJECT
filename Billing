import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Font;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Vector;


public class Billing extends JFrame {

    private JPanel contentPane;

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Billing frame = new Billing(null, null, null, null, null, null, null, null);
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public interface ConfirmationListener {
        void onConfirm();
    }

    private ConfirmationListener confirmationListener;
    private String name;
    private String phoneNo;
    private String address;
    private String emailAddress;
    private String birthdate;
    private String treatment;
    private String date;
    private String time;
    private DefaultTableModel model;

    public Billing(String name, String phoneNo, String address, String emailAddress, String birthdate,String treatment, String date, String time) {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setBounds(100, 100, 1000, 563);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);

        this.name = name;
        this.phoneNo = phoneNo;
        this.address = address;
        this.emailAddress = emailAddress;
        this.birthdate = birthdate;
        this.treatment = treatment;
        this.date = date;
        this.time = time;

        double billAmount = 0.0;
        
        if (treatment.equals("Teeth Cleaning")) {
            billAmount = 1500;
        } else if (treatment.equals("Teeth Whitening")) {
            billAmount = 5000;
        } else if (treatment.equals("Extraction")) {
            billAmount = 2000;
        } else if (treatment.equals("Veneers")) {
            billAmount = 8000;
        } else if (treatment.equals("Crowns")) {
            billAmount = 10000;
        } else if (treatment.equals("Root Canal")) {
            billAmount = 5000;
        } else if (treatment.equals("Braces")) {
            billAmount = 50000;
        } else if (treatment.equals("Bonding")) {
            billAmount = 2500;
        } else if (treatment.equals("Dentures")) {
            billAmount = 10000;
        }
        contentPane.setLayout(null);

        // Label for displaying treatment
        JLabel lblNewLabel = new JLabel("Treatment: " + treatment);
        lblNewLabel.setBackground(new Color(192, 192, 192));
        lblNewLabel.setFont(new Font("Verdana", Font.BOLD, 16));
        lblNewLabel.setBounds(622, 146, 299, 71);
        contentPane.add(lblNewLabel);

        // Label for displaying bill amount
        JLabel lblNewLabel_1 = new JLabel("Bill Amount: PHP - " + billAmount);
        lblNewLabel_1.setBackground(new Color(192, 192, 192));
        lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 16));
        lblNewLabel_1.setBounds(622, 215, 308, 71);
        contentPane.add(lblNewLabel_1);

        // Label for displaying date
        JLabel lblDate = new JLabel("Date: " + date);
        lblDate.setBackground(new Color(11, 219, 0));
        lblDate.setFont(new Font("Tahoma", Font.BOLD, 16));
        lblDate.setBounds(221, 215, 281, 71);
        contentPane.add(lblDate);
        
        // Label for displaying time
        JLabel lbltime = new JLabel("Time: " + time);
        lbltime.setBackground(new Color(192, 192, 192));
        lbltime.setFont(new Font("Verdana", Font.BOLD, 16));
        lbltime.setBounds(221, 292, 281, 71);
        contentPane.add(lbltime);

        // Button for confirming billing
        JButton btnConfirm = new JButton("Confirm");
        btnConfirm.setBackground(new Color(11, 219, 0));
        btnConfirm.setForeground(new Color(0, 0, 0));
        btnConfirm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            	JOptionPane.showMessageDialog(null, "Appointment Scheduled");
            	Login log = new Login();
            	log.setVisible(true);
            	dispose();
            }
        });
        btnConfirm.setBounds(739, 470, 100, 30);
        contentPane.add(btnConfirm);

        // Button for canceling billing
        JButton btnCancel = new JButton("Cancel");
        btnCancel.setBackground(new Color(255, 0, 0));
        btnCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        btnCancel.setBounds(859, 470, 100, 30);
        contentPane.add(btnCancel);
        
        JLabel lblname = new JLabel("Name: " + name);
        lblname.setFont(new Font("Tahoma", Font.BOLD, 16));
        lblname.setBackground(new Color(11, 219, 0));
        lblname.setBounds(221, 146, 281, 71);
        contentPane.add(lblname);
        
        // Label for displaying an image
        JLabel lblNewLabel_2 = new JLabel("New label");
        lblNewLabel_2.setIcon(new ImageIcon("C:\\Users\\HP\\Downloads\\4.png"));
        lblNewLabel_2.setBounds(0, 0, 1000, 563);
        contentPane.add(lblNewLabel_2);
    }

    // Sets the confirmation listener
    public void setConfirmationListener(ConfirmationListener listener) {
        this.confirmationListener = listener;
    }

    // Retrieves the name
    public String getName() {
        return name;
    }

    // Retrieves the phone number
    public String getPhoneNo() {
        return phoneNo;
    }

    // Retrieves the address
    public String getAddress() {
        return address;
    }

    // Retrieves the email address
    public String getEmailAddress() {
        return emailAddress;
    }

    // Retrieves the birthdate
    public String getBirthdate() {
        return birthdate;
    }

    // Retrieves the treatment
    public String getTreatment() {
        return treatment;
    }

    // Retrieves the date
    public String getDate() {
        return date;
    }

    // Retrieves the time
    public String getTime() {
        return time;
    }

    // Saves the data to a file
    private void saveDataToFile() {
        try {
            FileWriter writer = new FileWriter("patient_data.txt", true);
            writer.write(name + "," + phoneNo + "," + address + "," + emailAddress + "," +
                    birthdate + "," + treatment + "," + date + "," + time + "\n");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
   }
}

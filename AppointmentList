import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.event.ActionEvent;
import javax.swing.ScrollPaneConstants;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import java.util.Date;
import java.util.List;
import java.util.Calendar;
import com.toedter.calendar.JCalendar;
import com.toedter.calendar.JDateChooser;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.BevelBorder;


public class AppointmentList extends JFrame {
    private JTable table;
    private DefaultTableModel model;

    public AppointmentList(DefaultTableModel tableModel) {
        model = tableModel;
        
        setTitle("Appointment Details");
        setBounds(100, 100, 1000, 563);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        table = new JTable(model) {
            @Override
            public Class<?> getColumnClass(int column) {
                return getValueAt(0, column).getClass();
            }
        };

        table.setDefaultRenderer(Object.class, new HighlightRenderer());

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setViewportBorder(new SoftBevelBorder(BevelBorder.LOWERED, null, null, null, null));
        scrollPane.setBounds(196, 129, 763, 310);
        getContentPane().add(scrollPane);

        JButton btnDelete = new JButton("Delete");
        btnDelete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    model.removeRow(selectedRow);
                    saveDataToFile(); // Save the modified data to the text file
                }
            }
        });
        btnDelete.setBounds(848, 459, 111, 23);
        getContentPane().add(btnDelete);

        JButton btnEdit = new JButton("Reschedule");
        btnEdit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    // Get the selected appointment details
                    String name = model.getValueAt(selectedRow, 0).toString();
                    String phoneNo = model.getValueAt(selectedRow, 1).toString();
                    String address = model.getValueAt(selectedRow, 2).toString();
                    String emailAddress = model.getValueAt(selectedRow, 3).toString();
                    String birthdate = model.getValueAt(selectedRow, 4).toString();
                    String treatment = model.getValueAt(selectedRow, 5).toString();
                    String date = model.getValueAt(selectedRow, 6).toString();
                    String time = model.getValueAt(selectedRow, 7).toString();

                    JDateChooser dateChooser = new JDateChooser();
                    dateChooser.setDateFormatString("MM/dd/yyyy");
                    dateChooser.setDate(new Date()); 

                    String[] times = {"10:00 AM", "11:00 AM", "12:00 PM","1:00 PM","2:00 PM","3:00 PM"};
                    JComboBox<String> timePicker = new JComboBox<>(times);

                    Object[] message = {
                            "Select a new date:", dateChooser,
                            "Select a new time:", timePicker
                    };

                    int option = JOptionPane.showConfirmDialog(null, message, "Reschedule Appointment",
                            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                    if (option == JOptionPane.OK_OPTION) {
                        // Get the selected date and time
                        Date selectedDate = dateChooser.getDate();
                        Date currentDate = new Date(); // Current date
                        if (selectedDate.before(currentDate)) {
                            JOptionPane.showMessageDialog(null, "Please select a date that has not passed.");
                            return; // Do not continue if the date has passed
                        }

                        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                        String newDate = sdf.format(selectedDate);
                        String newTime = timePicker.getSelectedItem().toString();

                        // Check for conflicting appointments
                        boolean isConflict = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (i == selectedRow) {
                                continue; 
                            }

                            String existingDate = model.getValueAt(i, 6).toString();
                            String existingTime = model.getValueAt(i, 7).toString();
                            if (existingDate.equals(newDate) && existingTime.equals(newTime)) {
                                isConflict = true;
                                break;
                            }
                        }

                        if (isConflict) {
                            JOptionPane.showMessageDialog(null, "The selected date and time are already booked. Please choose another.");
                            return; // Do not continue if there is a conflict
                        }

                        // Update the JTable model with the new date and time
                        model.setValueAt(newDate, selectedRow, 6); // Assuming the date column is at index 6
                        model.setValueAt(newTime, selectedRow, 7); // Assuming the time column is at index 7

                        model.fireTableDataChanged(); // Notify the table that data has changed
                        saveDataToFile(); // Save the modified data to the text file
                    }
                }
            }
        });
        btnEdit.setBounds(699, 459, 123, 23);
        getContentPane().add(btnEdit);

        JButton btnback = new JButton("");
        btnback.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Login login = new Login();
                login.setVisible(true);
                dispose();
            }
        });
        btnback.setBounds(927, 22, 49, 32);
        btnback.setBorderPainted(false);
        btnback.setContentAreaFilled(false);
        btnback.setOpaque(false);
        getContentPane().add(btnback);

        JButton btnNewButton = new JButton("");
        btnNewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Info AppointmentList = new Info();
                AppointmentList.setVisible(true);
                dispose();
            }
        });
        btnNewButton.setBounds(10, 129, 195, 86);
        btnNewButton.setBorderPainted(false);
        btnNewButton.setContentAreaFilled(false);
        btnNewButton.setOpaque(false);
        getContentPane().add(btnNewButton);
        
        JButton btnNewButton_1 = new JButton("View Treatment History");
        btnNewButton_1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                List<String> patientNames = new ArrayList<>();
                for (int row = 0; row < model.getRowCount(); row++) {
                    String patientName = model.getValueAt(row, 0).toString();
                    if (!patientNames.contains(patientName)) {
                        patientNames.add(patientName);
                    }
                }

                TreatmentHistory historyFrame = new TreatmentHistory(model, patientNames);
                historyFrame.setVisible(true);
            }
        });
        btnNewButton_1.setBounds(499, 459, 190, 23);
        getContentPane().add(btnNewButton_1);
        
                JLabel lblNewLabel = new JLabel("New label");
                lblNewLabel.setIcon(new ImageIcon("C:\\Users\\HP\\Downloads\\3.png"));
                lblNewLabel.setBounds(0, 0, 1000, 563);
                getContentPane().add(lblNewLabel);
    }

    private class HighlightRenderer extends DefaultTableCellRenderer {
        @Override
        public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                                  boolean hasFocus, int row, int column) {
            java.awt.Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                    row, column);

            if (model.getRowCount() > 0 && row == model.getRowCount() - 1) {
                cellComponent.setBackground(Color.GREEN);
            } else {
                cellComponent.setBackground(table.getBackground());
            }

            return cellComponent;
        }
    }
    public static void main(String[] args) {
        DefaultTableModel model = new DefaultTableModel();
       

        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    AppointmentList frame = new AppointmentList(model);
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
    private void saveDataToFile() {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("appointment_data.txt"));
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    writer.write(model.getValueAt(row, col).toString());
                    writer.write(",");
                }
                writer.newLine();
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
